{
	"info": {
		"_postman_id": "46c55b40-166f-4315-8601-f5978f1fc6e0",
		"name": "File Storage",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Global Storage",
			"item": [
				{
					"name": "Search for Files",
					"item": [
						{
							"name": "[TC] Filter : path",
							"item": [
								{
									"name": "[Initial State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d7a60853-e8ae-4dda-8a62-277676f60151",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "Filter : path",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9eecce51-837c-4c5e-a6b4-1507881842ce",
												"exec": [
													"pm.test(\"Verify File path\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"});\r",
													"\r",
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f98b0d25-6e9f-4abb-bc25-fee4e7a4d949",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "path = 'foo/bar/temp.txt'"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8da4a35a-d077-4b2c-a8ad-b928ee147bf4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "dd381514-acbf-40b5-b000-5d3657fe0d81"
						},
						{
							"name": "[TC] Filter : timestamp",
							"item": [
								{
									"name": "[Initial State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "46d7d0fb-073f-4535-8334-73371dcab260",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "Filter : timestamp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9eecce51-837c-4c5e-a6b4-1507881842ce",
												"exec": [
													"pm.test(\"Verify File timestamp\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].timestamp).to.eql(pm.environment.get('temp_timestamp'));\r",
													"});\r",
													"\r",
													"pm.test(\"API response status code\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4bc4e2e8-8ccb-4b03-a766-82c002f4da97",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=timestamp = '{{temp_timestamp}}'&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "timestamp = '{{temp_timestamp}}'"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9a4010fb-4e86-4f91-9451-0dde3cd8cc19",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "297f4286-e604-4170-9729-08ddd4d43d3e"
						},
						{
							"name": "[TC] File size",
							"item": [
								{
									"name": "[Initial State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "549192d1-41ba-4211-8ed0-d53cadab64f2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "File size",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9eecce51-837c-4c5e-a6b4-1507881842ce",
												"exec": [
													"pm.test(\"Verify file size\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"});\r",
													"\r",
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1a063c54-2dd6-425b-a374-363af2208906",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "path = 'foo/bar/temp.txt'"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d4ee0f5e-7181-4bf2-a711-771ebc9beae8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "a2bd24fc-a9ed-47d2-8867-9b8d991d229b"
						},
						{
							"name": "[TC] Invalid Request Limit boundary Analysis",
							"item": [
								{
									"name": "[Initial State] Global Storage temp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "49743080-538f-43cc-8678-584cd1e40066",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Initial State] Global Storage temp2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp2.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp2.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e795ba72-5c1b-45f6-a3eb-78d09e6686b0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp2.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Initial State] Global Storage temp3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp3.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp3.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "18361dfa-4182-4cba-85d4-b5c5ca24f1b5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp3.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "Limit = -1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "934cbe24-d5eb-41e7-9385-b29be8fff57b",
												"exec": [
													"pm.test(\"Verify Payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data).to.eql([]);\r",
													"});\r",
													"\r",
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(count).to.be.eql(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d2b09bac-80e8-4d76-b804-e0c03d7d223b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=&limit=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": ""
												},
												{
													"key": "limit",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Limit = 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b22f3cd5-48d3-4c2a-bb8f-bc80296a09f6",
												"exec": [
													"pm.test(\"Verify Payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data).to.eql([]);\r",
													"});\r",
													"\r",
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(count).to.be.eql(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "14c9d636-8152-44f3-b764-cda502c654c8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=&limit=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": ""
												},
												{
													"key": "limit",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Limit = 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f827888-e8b6-480b-bd7a-de7b152466c8",
												"exec": [
													"pm.test(\"Verify Payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data).not.eql([]);\r",
													"});\r",
													"\r",
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(count).to.be.eql(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bad835b5-902b-4d75-b762-9a9fc3942790",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=&limit=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": ""
												},
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Limit = 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "973caae8-eb87-426f-8e44-1416538a29dc",
												"exec": [
													"pm.test(\"Verify Payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data).not.eql([]);\r",
													"});\r",
													"\r",
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(count).to.be.eql(2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d240ad94-6e1e-4aa2-83e6-f88ce45d3543",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=&limit=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": ""
												},
												{
													"key": "limit",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Limit = 9223372036854775806",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b973be96-30aa-48fe-9125-ae525e602266",
												"exec": [
													"pm.test(\"Verify Payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data).not.eql([]);\r",
													"});\r",
													"\r",
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(count).to.be.eql(3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e0162fb2-94a9-426a-b390-9a3853db6345",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=&limit=9223372036854775806",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": ""
												},
												{
													"key": "limit",
													"value": "9223372036854775806"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Limit = 9223372036854775807",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b973be96-30aa-48fe-9125-ae525e602266",
												"exec": [
													"pm.test(\"Verify Payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data).not.eql([]);\r",
													"});\r",
													"\r",
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(count).to.be.eql(3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8a1a49ac-c3ae-412e-8dc1-4d4831b787c4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=&limit=9223372036854775807",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": ""
												},
												{
													"key": "limit",
													"value": "9223372036854775807"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Limit = 9223372036854775808",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "265dd5ed-c53d-42b1-92e2-e849a57e6080",
												"exec": [
													"pm.test(\"Verify Payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).not.eql([]);\r",
													"});\r",
													"\r",
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ffe196b6-7952-4c04-832f-39ffb2dd53ea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=&limit=9223372036854775808",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": ""
												},
												{
													"key": "limit",
													"value": "9223372036854775808"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4e516699-5e12-49f1-944f-bc4ded3f589d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "11f39e22-178c-48e4-95f4-4c6257a9abd6"
						},
						{
							"name": "[TC] Limit search objects",
							"item": [
								{
									"name": "[Initial State] Global Storage temp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "61e8617d-0a10-425b-83e7-e3bf5a72f5eb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Initial State] Global Storage temp2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp2.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp2.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e469692f-32fe-45cf-a498-a5e224665678",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp2.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Initial State] Global Storage temp3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp3.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp3.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b39d0fc2-196a-48d1-b741-84b0c3ff2786",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp3.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "Limit = 2, with 3 files",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89637e3c-98c7-4705-994c-aeb43319a132",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(count).to.be.eql(2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9b24c1ad-f15a-40a9-9e54-3601e387a88b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=path='temp'&limit=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "path='temp'"
												},
												{
													"key": "limit",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "90377498-1579-4d2b-ab7e-3a1879d38633",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "698dc8ca-43dd-4399-8345-5b3efdf6634d"
						}
					],
					"id": "451a3f17-feda-47cf-9edd-9c0e1109dec9"
				},
				{
					"name": "Upload a File",
					"item": [
						{
							"name": "[TC] File upload",
							"item": [
								{
									"name": "[Initial State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d54b5dd0-e4d7-4747-97be-1fd9b3de4322",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "cb04e278-934c-4a03-9750-2007d7c91701",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "ded3b343-e9b1-4003-b7a6-48d94d118f9c"
						},
						{
							"name": "[TC] Several upload",
							"item": [
								{
									"name": "[Initial State] Global Storage 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ae2b3b30-ff77-40ac-8fc1-f02d68637720",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Initial State] Global Storage 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp2.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_2\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp2.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "006f0078-7dcd-4c90-9218-f88d0cfa7c4f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp2.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Initial State] Global Storage 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp3.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_3\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp3.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fb615362-d480-4efc-a222-b34f551abcc2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp3.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4ae003e2-42a2-4876-975f-6ab9ca033246",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "32a12d3c-da0e-4933-9542-c166ed30c9a1"
						},
						{
							"name": "[TC] Several uploads in same request",
							"item": [
								{
									"name": "[Initial State] Global Storage 2 files",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data).to.eql([]);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "842ecf85-f5aa-449d-a19b-2ce324eaaade",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": [
														"/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt",
														"/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp2.txt"
													]
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "01a75384-0561-4a80-8675-43b9b935da83",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "2d7ae422-21c1-4e69-adc1-2db25e9066ce"
						},
						{
							"name": "[TC] Diffrent file formats",
							"item": [
								{
									"name": "[Initial State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0b0499f7-f449-4a55-9f59-cd489ce0e135",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Initial State] Global Storage - MP4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/video.mp4'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_mp4\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/video.mp4\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0c547f1d-7b55-4153-bfd3-774a79f359c8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/video.mp4"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Initial State] Global Storage - GIF",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/image.gif'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_gif\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/image.gif\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c1c2a619-3b9e-4dd1-b642-17db280383cf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/image.gif"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d3d6b33e-3131-4b37-9d07-5a92995081c7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "1cf60fc8-14a4-4dc9-a24f-2d9c116b48f8"
						},
						{
							"name": "[TC] Maximum total file size",
							"item": [
								{
									"name": "[Initial State] Global Storage - 250mb",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile 250mb - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/file_250.test'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_250\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/file_250.test\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7e9a2c9a-f373-4ce4-a2cf-3bb4052da170",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/file_250.test"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "File path",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9eecce51-837c-4c5e-a6b4-1507881842ce",
												"exec": [
													"pm.test(\"Verify File path\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/file_250.test\");\r",
													"});\r",
													"\r",
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "93cbb02e-460c-4789-81ad-c7a097558126",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=path = 'foo/bar/file_250.test'&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "path = 'foo/bar/file_250.test'"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "File timestamp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9eecce51-837c-4c5e-a6b4-1507881842ce",
												"exec": [
													"pm.test(\"Verify File timestamp\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].timestamp).to.eql(pm.environment.get('temp_timestamp_250'));\r",
													"});\r",
													"\r",
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "572c7d16-dafc-47da-be9f-7193a101e054",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=timestamp = '{{temp_timestamp_250}}'&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "timestamp = '{{temp_timestamp_250}}'"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "File size",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9eecce51-837c-4c5e-a6b4-1507881842ce",
												"exec": [
													"pm.test(\"Verify File size\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].size).to.eql(256000);\r",
													"});\r",
													"\r",
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "cb108f49-d18c-424f-8083-d339b514ffc1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=path = 'foo/bar/file_250.test'&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "path = 'foo/bar/file_250.test'"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Initial State] Global Storage - 500mb",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile 500mb - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter= path='foo/bar/file_500.test'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"    \r",
													"    pm.test(\"Search for testfile - Verify API response status code & that file does not exist.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data).to.eql([]);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "34b94855-f5a5-4094-91bc-5bde739a2ad3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/file_500.test"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1bebe0c9-f16d-48ad-911d-9c2033859275",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "e9340a48-fc6e-4370-bc0a-bd07c97a2829"
						},
						{
							"name": "[TC] Overwrite file",
							"item": [
								{
									"name": "[Initial State] Global Storage 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "03931cde-b014-4a32-9d0b-f6bcd1912b39",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "Overwrite file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload same testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_samefile\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code, successfully uploaded file & latest timestamp\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"        pm.expect(jsonData.data[0].timestamp).to.eql(pm.environment.get('temp_timestamp_samefile'));\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6a98a6e8-d084-4fbf-b842-886aaa598faf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f38a99b6-0b2a-4119-abf3-9f693c37ff65",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "f430cd60-b689-462a-ac57-3e80664ae4c1"
						},
						{
							"name": "[TC] File upload with invalid request body",
							"item": [
								{
									"name": "File upload with invalid request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7120bdf7-0989-4073-9353-9a009d25d910",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "Search for file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9eecce51-837c-4c5e-a6b4-1507881842ce",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify empty payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data).to.eql([]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1f4d14a4-42f4-4351-a6ca-f3579beed60f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"global",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "path = 'foo/bar/temp.txt'"
												},
												{
													"key": "limit",
													"value": "100",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c939c3a7-7b35-4688-86f0-9fef626295bb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "85da80f2-de52-4e96-93bb-fb115921316f"
						}
					],
					"id": "1ff8ff53-c152-478f-8a95-8f103035478d"
				},
				{
					"name": "Download a File",
					"item": [
						{
							"name": "[TC] - File download",
							"item": [
								{
									"name": "[Initial State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f5f1280b-a548-4700-85b3-6165a5d904a9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "File download",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26c81e12-e8ba-462f-80e5-4be283497c5a",
												"exec": [
													"pm.test(\"Verify file content\", function () {\r",
													"    pm.response.to.have.body(\"SESANOR_SEMAREX\");\r",
													"});\r",
													"\r",
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e705b297-f25b-4879-ab58-0eaeb403642a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"path\": \"foo/bar/temp.txt\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/download"
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "69fac675-8dc4-4edc-9bfc-0f1ee84d4154",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "cdafa2b3-7209-471a-908d-19c1e103e3b1"
						},
						{
							"name": "[TC] - File not found",
							"item": [
								{
									"name": "[Initial State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b7b38ccd-d9c2-43eb-95ae-5a2e048e3697",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "File not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26c81e12-e8ba-462f-80e5-4be283497c5a",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3d3042a2-d184-478f-bcee-e9c4cbaf65e7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"path\": \"foo/bar/nonexistingfile.txt\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/download"
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fd2b03fe-02d5-4e91-a491-c2737f66bfa8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "28e6f3b4-e58a-4f69-82f4-9d0aec4be090"
						},
						{
							"name": "[TC] - Invalid request",
							"item": [
								{
									"name": "[Initial State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "99e4e848-8646-46bc-960a-25ac32335ed2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "Invalid request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26c81e12-e8ba-462f-80e5-4be283497c5a",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5537dc66-a371-479a-afc8-a9fbb31250b0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/download"
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a30c76b5-bbd6-4af7-ac38-e4e98639f2f9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "dbff6e75-59e2-4633-8ded-a5007365ffa0"
						}
					],
					"id": "8c800972-5111-4225-8f2e-3fccf5f6a14c"
				},
				{
					"name": "Remove a File",
					"item": [
						{
							"name": "[TC] Delete file",
							"item": [
								{
									"name": "[Initial State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9a7a0861-2d4f-4167-9240-762341055e15",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6ac631c5-6d39-4120-8ed4-b72086dc21ca",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "9eaea14f-02ca-479f-948a-98bd92c81ce1"
						},
						{
							"name": "[TC] Delete a non existing file",
							"item": [
								{
									"name": "[Initial State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f3998d99-3c57-4f44-9665-534eaa045b7c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "Delete a non existing file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34e9fc8d-c430-4312-b167-aa449d146b2a",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"  pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "278cfd9d-cb6f-4354-89f2-7fe2e895db90",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"path\": \"foo/bar/nonexistingfile.txt\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/delete"
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1c1730db-92d9-4ab0-b40c-b41da21ec499",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "a210ad04-7514-4030-acd9-7e96a709f1d6"
						},
						{
							"name": "[TC] Invalid request",
							"item": [
								{
									"name": "[Initial State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "928bb03c-a4b2-4506-94d1-b67f121501dc",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/search?filter=path = 'foo/bar/temp.txt'&limit=100\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);    \r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"foo/bar/temp.txt\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dac481d-e864-4f2b-8fef-bb2ff4ca9731",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9edd1d0d-687a-4cf4-9bd5-714507d409f9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "foo/bar",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/upload"
									},
									"response": []
								},
								{
									"name": "Invalid request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34e9fc8d-c430-4312-b167-aa449d146b2a",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b2fd57a3-fbd8-4d37-85c1-9ccc7ff2d11d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/storage/global/files/delete"
									},
									"response": []
								},
								{
									"name": "[Exit State] Global Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/storage/global/files/delete\", \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"path\": path\r",
													"            })\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });\r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b00e1433-9358-4774-8c06-8b3e5ec3ad52",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/global/files/search"
									},
									"response": []
								}
							],
							"id": "5fcb1f76-ef97-403a-b111-cfb31f25f2b4"
						}
					],
					"id": "dd94de4d-ebe9-4def-badf-e4dd5dbfd609"
				}
			],
			"id": "558438a7-9f9b-4969-b6a6-924435e05d4a"
		},
		{
			"name": "Object Storage",
			"item": [
				{
					"name": "Initialize model/object",
					"item": [
						{
							"name": "Create modelDefinition",
							"id": "88cf4cee-e698-455e-b6c6-53da62fb3fd2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"modelId\": \"abb.hydra.test\",\r\n    \"name\": \"ModelDefinition for hydra testing\",\r\n    \"description\": \"ModelDefinition for hydra testing.\",\r\n    \"tags\": [\r\n    \"Process Automation\"\r\n    ],\r\n    \"components\": {\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl_typeregistry}}/api/v1.0/modelDefinitions"
							},
							"response": []
						},
						{
							"name": "Add TypeDefinitions to modelDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ae35ec6-5b87-48ce-bc0b-d210eab4db49",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7d9257b6-34ca-4a60-b2f8-d0ba9f03a8f3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"model\": \"abb.hydra.test\",\r\n  \"typeId\": \"abb.object.test\",\r\n  \"name\": \"Hydra object test\",\r\n  \"description\": \"Hydra object test\",\r\n  \"version\": \"1.0.0\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl_typeregistry}}/api/v1.0/modelDefinitions/:model/types",
									"host": [
										"{{baseUrl_typeregistry}}"
									],
									"path": [
										"api",
										"v1.0",
										"modelDefinitions",
										":model",
										"types"
									],
									"variable": [
										{
											"key": "model",
											"value": "abb.hydra.test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get/create Object models",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb4f0576-0d5a-4ade-9511-46e0381d2589",
										"exec": [
											"var data = pm.response.json().data;\r",
											"var len = Object.keys(data).length;\r",
											"\r",
											"if(len == 0)\r",
											"{\r",
											"    //No objects for model\r",
											"    //Create new opbject\r",
											"    const options_object = {\r",
											"    url:  pm.environment.get('baseUrl_infomodel') + \"/api/v1.0/objects\", \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\",\r",
											"        \"Ability-Tenant-Id\" : pm.environment.get('tenant_id')\r",
											"        },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"model\": \"abb.hydra.test\",\r",
											"            \"type\": \"abb.object.test@1\"\r",
											"            })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    pm.sendRequest(options_object, function (err, response) {\r",
											"        //201 - Type definition was added to database\r",
											"        pm.expect(response).to.have.property('code', 201);\r",
											"        console.log(\"Created object : \" + response.code);  \r",
											"    }); \r",
											"}\r",
											"else if(len > 0)\r",
											"{\r",
											"    //Save objectId to env file-\r",
											"    pm.environment.set(\"test-object\", data[0].objectId)\r",
											"}\r",
											"else\r",
											"{\r",
											"    console.log(\"Error\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "373288fd-2238-4a74-ae9c-1c33a69baabf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Ability-Tenant-Id",
										"value": "{{tenant_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl_infomodel}}/api/v1.0/objects?filter=model = '{{test-model}}'",
									"host": [
										"{{baseUrl_infomodel}}"
									],
									"path": [
										"api",
										"v1.0",
										"objects"
									],
									"query": [
										{
											"key": "filter",
											"value": "model = '{{test-model}}'"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "dcdc6e3c-e4d9-4cba-86ee-a5299f0ce361"
				},
				{
					"name": "Search for Files",
					"item": [
						{
							"name": "[TC] Existing Filter : objectId",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e59a179a-db45-4424-adb6-62a54e3b92a4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Existing Filter : objectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify file objectId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "15987b2a-bbdb-43a4-9820-4bfa6b653316",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=objectId = '{{test-object}}'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "objectId = '{{test-object}}'"
												},
												{
													"key": "limit",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2d642260-18f5-4182-8b5f-7ef9fe2eac31",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "09a85cf9-e0d5-45c2-9f5f-31414d074f46"
						},
						{
							"name": "[TC] Non existing objectid - Filter : objectId",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "babef14a-3aa9-4d80-81a3-2e2675009e69",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Non existing objectid - Filter : objectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify empty payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data).to.eql([]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "58bf3a2e-dc0f-4d61-abcc-2c1516ba3c93",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=objectId = '{{test-object-invalid}}'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "objectId = '{{test-object-invalid}}'"
												},
												{
													"key": "limit",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "850bd7ff-5976-4c5b-bcb9-cf7489601cd1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "4ee1df8f-2ffe-4e5e-b28f-945fc6763d98"
						},
						{
							"name": "[TC] Existing Filter : model",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0e950695-8a45-4d42-9b32-0cbfc9660451",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Existing Filter : model",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify file model\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3db847c6-fd3a-4c28-b5fb-2a30d560894b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=model =  '{{test-model}}'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "model =  '{{test-model}}'"
												},
												{
													"key": "limit",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c7b0ded3-4dd9-4a7e-9b5b-998e26f0db75",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "539f1702-968f-4642-a334-d92117b683b2"
						},
						{
							"name": "[TC] Non-existing Filter : model",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b4647fe4-9d02-4db8-9160-77c949a20d77",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Non-existing Filter : model",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify empty payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data).to.eql([]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0b56e78e-0d78-45bf-9615-d70779067e1c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=model =  '{{test-model-invalid}}'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "model =  '{{test-model-invalid}}'"
												},
												{
													"key": "limit",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "241917a6-26e1-4243-92df-5791d85866c4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "7a0371f4-0f0c-4376-a1ac-28cb6bc8605c"
						},
						{
							"name": "[TC] Filter : path",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f99fa416-acea-4766-8886-69f0fc24a26e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter : path",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify file path\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d3af7a0e-b408-4f0a-a149-60ea30a3c117",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=path = 'temp.txt'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "path = 'temp.txt'"
												},
												{
													"key": "limit",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5a19ef97-7eba-44f2-96e8-6b5e7be89959",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "09d53619-e1ab-4a4b-8e67-9c9da9de05ad"
						},
						{
							"name": "[TC] Filter : timestamp",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2b24902b-421e-49c0-b06f-3ab9df6699f4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter : timestamp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify file timestamp\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].timestamp).to.eql(pm.environment.get('temp_timestamp'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b1d9eb37-b618-447c-b1d6-7468ef440ec7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=timestamp = '{{temp_timestamp}}'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "timestamp = '{{temp_timestamp}}'"
												},
												{
													"key": "limit",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "862c1f98-811b-419c-8229-fb172acf2b42",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "0f03ab5b-9541-4ceb-b81e-064d45a7139e"
						},
						{
							"name": "[TC] File size",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "04b45e51-3fd4-4d15-bb40-604561d40cf0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "File size",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify file size\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "dae8560a-773d-46b3-a83c-1020b21e3634",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=path = 'temp.txt'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "path = 'temp.txt'"
												},
												{
													"key": "limit",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1dc40ceb-e47b-4311-abcc-0b596c89af1b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "7e3b5e5d-144d-4022-be07-dfcdd09fbb04"
						},
						{
							"name": "[TC] Invalid Request Limit boundary Analysis",
							"item": [
								{
									"name": "[Initial State] Object Storage temp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "97066551-77af-4467-a2ff-a437bf47b220",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Initial State] Object Storage temp2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp2.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_2\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp2.txt\");\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "16d4b152-9a57-4a71-832f-27099d3e11dc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp2.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp2.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Initial State] Object Storage temp3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp3.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_3\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp3.txt\");\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9b75d330-8384-4815-a936-043171748454",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp3.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp3.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Limit = -1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify empty payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data).to.eql([]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "422b571d-d7ac-4efb-885c-c4c2f6965059",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?limit=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Limit = 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify empty payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data).to.eql([]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9be9f3ca-7fb9-49f2-8a19-74a7cd673683",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?limit=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Limit = 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"\r",
													"pm.test(\"Verify payload\", function () {\r",
													"    pm.expect(count).to.be.eql(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "982b04bd-cc31-4af1-bdea-e41fe5060a42",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?limit=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Limit = 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"\r",
													"pm.test(\"Verify payload\", function () {\r",
													"    pm.expect(count).to.be.eql(2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "985a22b5-7a70-4bd4-b07f-33d3db933412",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?limit=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Limit = 9223372036854775806",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"\r",
													"pm.test(\"Verify payload\", function () {\r",
													"    pm.expect(count).to.be.eql(3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e9d46442-609b-4275-b54a-26bb53de1528",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?limit=9223372036854775806",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "9223372036854775806"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Limit = 9223372036854775807",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"\r",
													"pm.test(\"Verify payload\", function () {\r",
													"    pm.expect(count).to.be.eql(3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c4143f02-b507-4622-8797-798c7e9afb24",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?limit=9223372036854775807",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "9223372036854775807"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Limit = 9223372036854775808",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify empty payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).not.eql([]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "96445040-391a-4f88-b424-06411d9b7842",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?limit=9223372036854775808",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "9223372036854775808"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "57ae7ad0-e9a1-4780-82f3-8b3e90b6d5fc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "a84a6b18-00c4-44e3-88b6-1f318a767754"
						},
						{
							"name": "[TC] Limit search objects",
							"item": [
								{
									"name": "[Initial State] Object Storage temp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "09d533b2-564e-41b6-b975-757bb8e31e14",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"id": "32af0eb7-f073-4f01-bada-5754789c3d1d",
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"id": "399f92bf-0842-401f-b7e1-ebe87c9e9f41",
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"id": "278262e9-1bd9-4577-aa90-e41fcf387086",
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Initial State] Object Storage temp2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp2.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_2\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp2.txt\");\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4d63e9aa-1dcf-4e9d-91f7-0badcfaf470a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp2.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"id": "88d33809-4c95-4ba9-b3b5-b85951afad4f",
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"id": "b2b5889e-6cb4-4431-91b9-0aefdf2144dd",
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"id": "3de88117-e8fa-4f24-a369-0c6c5e962bca",
													"key": "path",
													"value": "temp2.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Initial State] Object Storage temp3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp3.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_3\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp3.txt\");\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "65957ea6-5048-439f-a535-b17333a621ec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp3.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"id": "c285573a-a9a6-4e50-a386-3bfa5863bbb4",
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"id": "03e08956-6ea5-4f22-8501-6b67ccb62ed5",
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"id": "1dc6dcf7-4b14-4377-a0ab-adb77f4d0789",
													"key": "path",
													"value": "temp3.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Limit = 2 with filter path",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"\r",
													"pm.test(\"Verify payload\", function () {\r",
													"    pm.expect(count).to.be.eql(2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7a7bf60e-0118-4a3a-b9fb-d46c6305701f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=path = 'temp'&limit=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "path = 'temp'"
												},
												{
													"key": "limit",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "21d8b8e9-3f7f-44fc-b542-403225d02161",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "ed332eb7-c6d5-467e-a431-5fccd3e165e4"
						}
					],
					"id": "d0de81c0-a518-43f5-9980-46fb2f1d5920"
				},
				{
					"name": "Upload a File",
					"item": [
						{
							"name": "[TC] File upload",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b3de1cc0-42b7-4732-b6a2-76d0d7567a9e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5484dd21-5c45-46d9-b20f-a1ad5ade96de",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "ba595e64-8891-4eb4-affb-f640fe573cae"
						},
						{
							"name": "[TC] Several upload",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "60adb257-5afa-49bc-9aa5-ec34219e5908",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Initial State] Object Storage second file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp2.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_2\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp2.txt\");\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2183c088-e485-4be7-9827-b375d00ea321",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp2.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp2.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Initial State] Object Storage third file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp3.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_3\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp3.txt\");\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8ba296dd-1a38-4645-8650-27ac59175ddc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp3.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp3.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9cb9ffaa-3cab-4267-a149-bd9138d2c3dc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "c38affca-6031-4869-8e2a-90f135ea4b54"
						},
						{
							"name": "[TC] Diffrent file formats",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "62d15ead-264c-44dd-9c9d-68d0e965768e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Initial State] Object Storage .MP4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='video.mp4'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_mp4\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"video.mp4\");\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e2af8ea9-ff70-4ab4-9a03-e54021d1239b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/video.mp4"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "video.mp4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Initial State] Object Storage .GIF",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='image.gif'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_gif\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"image.gif\");\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "48f8c843-01eb-4ea0-932a-cfd0b9e1c2d1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/image.gif"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "image.gif"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d8873c79-7228-4977-92af-a80e12c184b5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "f52266ed-8cb4-43af-8987-2d8d24282af2"
						},
						{
							"name": "[TC] Maximum total file size",
							"item": [
								{
									"name": "[Initial State] Object Storage 250mb",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='file_250.test'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp_250\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"file_250.test\");\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "40d751ec-4212-40de-88f5-3d2f806e9fb9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/file_250.test"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "file_250.test"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify file payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].path).to.eql(\"file_250.test\");\r",
													"    pm.expect(jsonData.data[0].timestamp).to.eql(pm.environment.get('temp_timestamp_250'));\r",
													"    pm.expect(jsonData.data[0].size).to.eql(256000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "13ecd1c8-6680-426f-9630-d2d09d5f30c5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=path = 'file_250.test'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "path = 'file_250.test'"
												},
												{
													"key": "limit",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Initial State] Object Storage 500mb",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='file_500.test'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"    \r",
													"    pm.test(\"Verify API response status code & that file does not exist.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data).to.eql([]);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5fb6185d-bfe1-4b41-b776-811005853cac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/file_500.test"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "file_500.test"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ddb76547-8da0-4dc6-87cd-ce5bffe9c08f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "da378078-5e5b-4683-afdf-42dc13cc152a"
						},
						{
							"name": "[TC] Overwrite file",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ebf6c6ac-0700-4983-bf87-8ee6f6f80e3c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Initial State] Object Storage 2nd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "75867eb3-02d9-4a2d-885f-f68953f41ea1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1c4e861b-7063-4b0b-8754-6a9467304193",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "7ea1162a-14a8-4920-b5f9-dc47bb9f76bd"
						},
						{
							"name": "[TC] File upload with invalid request body *",
							"item": [
								{
									"name": "File upload with invalid request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40433773-0aa1-4621-8192-05817dd5356e",
												"exec": [
													"pm.test(\"Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7aa70e5d-dc40-438a-a735-d60ff307e382",
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"query": [
												{
													"key": "path",
													"value": "",
													"type": "text",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify empty payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data).to.eql([]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d9479639-9b69-400c-af62-2f6e4d838e83",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=path = 'temp.txt'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "path = 'temp.txt'"
												},
												{
													"key": "limit",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "24b9c0d8-67c1-4045-a03a-6aee9b18c46b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "159cc34d-f214-40e8-b0b4-d58687667984"
						},
						{
							"name": "[TC] File upload with invalid model *",
							"item": [
								{
									"name": "File upload with invalid model",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40433773-0aa1-4621-8192-05817dd5356e",
												"exec": [
													"pm.test(\"Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "15d6d750-04f3-490a-a3c5-36bf50a042f1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"query": [
												{
													"key": "path",
													"value": "",
													"type": "text",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model-invalid}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify empty payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data).to.eql([]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d8eadc12-5e7c-4415-99a6-c2ec8855bf9a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=model = '{{test-model-invalid}}'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "model = '{{test-model-invalid}}'"
												},
												{
													"key": "limit",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e7005ec4-3761-4179-82dd-e086eafc8ff8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "7e3f8b4c-5c34-4522-a18c-38879a0c3d55"
						},
						{
							"name": "[TC] File upload with invalid objectId *",
							"item": [
								{
									"name": "File upload with invalid objectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40433773-0aa1-4621-8192-05817dd5356e",
												"exec": [
													"pm.test(\"Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "82c4bdac-1e8f-426e-8deb-f1be6d4f63a5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"query": [
												{
													"key": "path",
													"value": "",
													"type": "text",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object-invalid}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify empty payload\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data).to.eql([]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f6b40948-04a8-473a-986a-3069d1755094",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=model = '{{test-model-invalid}}'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "model = '{{test-model-invalid}}'"
												},
												{
													"key": "limit",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a442e63b-3251-40c8-8066-bb4a4696ea11",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "5a602cb3-f3f5-47d8-b30e-ca103f922309"
						}
					],
					"id": "bc4d33f0-0512-4ed2-af4d-aa2d118c5d94"
				},
				{
					"name": "Download a File",
					"item": [
						{
							"name": "[TC] File download",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "32c871a0-ad23-4a70-b88a-1a8bfa0db063",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"id": "274f211b-6dfc-4c75-b6b7-f1652f3720bc",
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"id": "424bcb4b-91de-4969-9e48-9d6e468cd5eb",
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"id": "5a817c37-3b50-46dc-a7f8-6f156566da15",
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "File download",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4673856-5b10-469c-adff-1dfbc38816e7",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify file content\", function () {\r",
													"    pm.response.to.have.body(\"SESANOR_SEMAREX\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "78a2f81c-622d-47ff-a853-e5c0447d82a8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"id": "fe89f83c-9e9e-416f-bf78-8b60b8bbc1f0",
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"id": "b1a87bf9-e851-4bdc-85a6-ad416cbf8793",
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"id": "6f488001-d807-444e-a6f0-f9449cb9c48c",
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c148ce28-59f7-4381-89f6-7d65b2bdad97",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "bb53611f-ef9f-4377-928c-a2bce02d18ef"
						},
						{
							"name": "[TC] File not found",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "35f1eddc-bdbe-40af-83e3-759e587e4d7b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"id": "274f211b-6dfc-4c75-b6b7-f1652f3720bc",
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"id": "424bcb4b-91de-4969-9e48-9d6e468cd5eb",
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"id": "5a817c37-3b50-46dc-a7f8-6f156566da15",
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "File not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4673856-5b10-469c-adff-1dfbc38816e7",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "de7fa096-0568-40bd-a4c0-de066a066746",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "nonexistingfile.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ce537c5e-24dd-46eb-85dc-4c9b942403d8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "3dcba988-2057-4d1c-a550-f226553892a4"
						},
						{
							"name": "[TC] Download existing file from non-existing objectid",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "707dd0bc-bbcf-4c3e-bbe9-93ef752e24c4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"id": "274f211b-6dfc-4c75-b6b7-f1652f3720bc",
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"id": "424bcb4b-91de-4969-9e48-9d6e468cd5eb",
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"id": "5a817c37-3b50-46dc-a7f8-6f156566da15",
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Download existing file from non-existing objectid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4673856-5b10-469c-adff-1dfbc38816e7",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7a8825ca-5b25-4b99-ae77-7e85e16b859a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object-invalid}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7359577b-a98c-42b9-80b4-a111d79f2fae",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "0193abcb-ebcb-43a7-a9d9-0348ff7936ad"
						},
						{
							"name": "[TC] Download existing file from non-existing modelid",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "69d60ae2-b4d0-49ae-8859-ba0cd0a5a4d0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"id": "274f211b-6dfc-4c75-b6b7-f1652f3720bc",
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"id": "424bcb4b-91de-4969-9e48-9d6e468cd5eb",
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"id": "5a817c37-3b50-46dc-a7f8-6f156566da15",
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Download existing file from non-existing modelid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4673856-5b10-469c-adff-1dfbc38816e7",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4bdd6a9b-e11f-4775-ab35-2b1c347b0767",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model-invalid}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "683e1115-2a67-43e6-8c2a-05a09cb04e69",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "e9dc652f-240a-4127-82e9-25d5e3fbe2cf"
						}
					],
					"id": "96b5bab9-9774-44dd-b93f-e1a79ab232a7"
				},
				{
					"name": "Remove a File",
					"item": [
						{
							"name": "[TC] Remove existing file from existing objectId",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f748c67e-957a-4be6-bd61-baaf6ab04404",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"id": "1d1539a6-9cba-4576-af95-b7824402a2a7",
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"id": "e2cae573-b089-4884-8a34-8029afe3ec23",
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"id": "1b936efc-c094-4a9b-b060-97cf3d6c808d",
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "53e948ee-904a-411f-bc1f-e177c252649b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "f25257cd-ac56-4e2c-b9b9-c6fb29df62de"
						},
						{
							"name": "[TC] Remove non-existing file",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2852e26a-41a1-4aa2-aff5-a197c7401cef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"id": "bda27cc8-8a54-404b-b3aa-e0dbc40f7d91",
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"id": "14584d77-a250-41a1-b59b-730821db8e9d",
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"id": "3c94ae0a-b3f0-47e7-8644-5e652f5ee930",
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete non-existing file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70a54ab4-4612-430f-915a-3b07520e71b2",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "78c0af92-01ce-4fa7-8711-3ec93b8c3bf0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "nonexistingfile.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for existing file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify file objectId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fcf2cba6-ec48-4705-aaa4-7b8b648efb3c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=path = 'temp.txt'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "path = 'temp.txt'"
												},
												{
													"key": "limit",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c454f313-46a2-4502-81bf-f0ea59317493",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "93bfc8e0-53df-4b6d-bb79-cc1aa0efb804"
						},
						{
							"name": "[TC] Remove existing file from non-existing objectId",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b1a406c8-df22-4848-8b17-0e76e4dd9168",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"id": "bda27cc8-8a54-404b-b3aa-e0dbc40f7d91",
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"id": "14584d77-a250-41a1-b59b-730821db8e9d",
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"id": "3c94ae0a-b3f0-47e7-8644-5e652f5ee930",
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete file with invalid objectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70a54ab4-4612-430f-915a-3b07520e71b2",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ed5da61b-06eb-4fe8-823d-471487d4c28d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object-invalid}}"
												},
												{
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search file with valid object",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify file objectId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7b3ceab7-81d4-43dd-96b0-517488026732",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=objectId = '{{test-object}}'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "objectId = '{{test-object}}'"
												},
												{
													"key": "limit",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "42f396e3-0722-4b9a-b652-c0e05d40e3de",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "85732667-981a-455c-a438-8d9500e5e885"
						},
						{
							"name": "[TC] Remove existing file from non-existing modelid",
							"item": [
								{
									"name": "[Initial State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6d2440-2b35-49e6-ac49-be79d83d2b7c",
												"exec": [
													"pm.test(\"Upload testfile - Verify API response status code\", function () {\r",
													"  pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.sendRequest(pm.environment.get('baseUrl') + \"/api/v1/storage/object/files/search?filter=path='temp.txt'\", function (err, response) {\r",
													"    var jsonData = response.json();\r",
													"\r",
													"    //Save timestamp to variable as input for the testcase.\r",
													"    pm.environment.set(\"temp_timestamp\", jsonData.data[0].timestamp);\r",
													"   \r",
													"    pm.test(\"Search for testfile - Verify API response status code & successfully uploaded file.\", function () {\r",
													"        pm.expect(response).to.have.property('code', 200);\r",
													"        pm.expect(jsonData.data[0].path).to.eql(\"temp.txt\");\r",
													"        pm.expect(jsonData.data[0].size).to.eql(0.0146484375);\r",
													"        pm.expect(jsonData.data[0].objectId).to.eql(pm.environment.get('test-object'));\r",
													"        pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19ac13c0-05d7-4ce0-905f-38ac17c7808a",
												"exec": [
													"//Create model/object (API)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "18f84ab3-e6f0-466b-a522-2b080142a6b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/C:/Users/SESANOR5/Desktop/Hydra/FileStorage/Files/temp.txt"
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"id": "bda27cc8-8a54-404b-b3aa-e0dbc40f7d91",
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"id": "14584d77-a250-41a1-b59b-730821db8e9d",
													"key": "model",
													"value": "{{test-model}}"
												},
												{
													"id": "3c94ae0a-b3f0-47e7-8644-5e652f5ee930",
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete file from non-existing modelId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70a54ab4-4612-430f-915a-3b07520e71b2",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "278b51d4-276e-46dd-9b17-64d7d8b566df",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/objects/:object/models/:model/files/:path",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objects",
												":object",
												"models",
												":model",
												"files",
												":path"
											],
											"variable": [
												{
													"key": "object",
													"value": "{{test-object}}"
												},
												{
													"key": "model",
													"value": "{{test-model-invalid}}"
												},
												{
													"key": "path",
													"value": "temp.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for file with valid modelId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d1e002-755e-48e3-81cb-66eb8425b29d",
												"exec": [
													"pm.test(\"API response status code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify file modelId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data[0].model).to.eql(pm.environment.get('test-model'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d356f900-ed3c-493e-943a-5dc79bc6edfd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/storage/object/files/search?filter=model = '{{test-model}}'",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"storage",
												"object",
												"files",
												"search"
											],
											"query": [
												{
													"key": "filter",
													"value": "model = '{{test-model}}'"
												},
												{
													"key": "limit",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Exit State] Object Storage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fddff42-072f-40b1-b769-646b17513350",
												"exec": [
													"pm.test(\"Search for files - Verify response code\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var data = pm.response.json().data;\r",
													"var count = Object.keys(data).length;\r",
													"var loopCount = 0;\r",
													"\r",
													"while(loopCount < count)\r",
													"{\r",
													"    var path = data[loopCount].path;\r",
													"    var objectId = data[loopCount].objectId;\r",
													"    var model = data[loopCount].model;\r",
													"\r",
													"    const options = {\r",
													"    url:  pm.environment.get('baseUrl') + \"/api/v1/objects/\" + objectId + \"/models/\" + model + \"/files/\" + path, \r",
													"    method: 'DELETE',\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(options, function (err, response) {\r",
													"        pm.test(\"Delete file(s) - Verify response code\", function () {\r",
													"            pm.expect(response).to.have.property('code', 204);\r",
													"        });  \r",
													"    });  \r",
													"\r",
													"    loopCount++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e5790d10-6359-4fcf-ac8f-b774cfcf6b9b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/v1/storage/object/files/search"
									},
									"response": []
								}
							],
							"id": "df37c559-a9f1-4fec-a7c6-8c3c10759edd"
						}
					],
					"id": "78e4fce1-2589-411a-b94d-bc9e0fc17e21"
				}
			],
			"id": "7ad681ea-d6bd-4c1a-a48d-e9426b94ef2b"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9c2460a0-e4b6-41c0-9471-befe95888a06",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "315c4e42-0dd6-418d-94e2-a214aa5b43cf",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}